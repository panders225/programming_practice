	
/************************************************************************
 * Last Run Date: 26 March 2017	            							*
 * Program Name: panders2_hw09_prog.sas									*
 * Program Location: C:/Users/Philip/Schools/TAMU/STAT_657/				*
 *				SASUniversityEdition/myfolders/homework/git_hw/hw_09/sasprogs/	* 
 * Creation Date: 25 March 2017											*
 * Author: Philip Anderson												*
 * Purpose: Meeting objectives for Assignment 08						*
 * Inputs: orion folder         *
 * Output: panders2_hw09_output.pdf															*
 * Modification History: *
 * Execution Instructions: N/A - run as-is												*
*/**********************************************************************;

/* Question 1 - set a system option that writes macro values
 	to the log as they are resolved */
/* specify another option that writes to the SAS log the
	 text created generated by macro execution */
options symbolgen mprint nodate nonumber;

/* specify the hw09 libref */
libname sasdata '/folders/myfolders/homework/git_hw/hw_09/sasdata' ;
/* file for output */
filename pdf_out '/folders/myfolders/homework/git_hw/hw_09/output/panders2_hw09_output.pdf';
ods pdf file=pdf_out;
/* 
Question 2 - copy the proc sql code that was used to create the view in assignment 8 
and paste it into this program
I'll be using the code from the solutions, and editing it to take macro variables
*/

/*remove the library reference from the SQL query and 
assign in the body of the program (below) */
libname orion '/folders/myfolders/orion_dat/sasdata' access=readonly;

/* assign macro variables for gender, start_date, end_date, and libname for output table */
%let gender = F;
%let enddt = 31Dec2006;
%let startdt = 01Jan2006;
%let outlib = work;


proc sql;
/* change the code so that it creates a table instead of a view */
create table &outlib..femdonors_test as
select 
c.employee_id 'ID'
, employee_name 'Name'
, salary format=dollar8.
, qtr1
, qtr2
, qtr3
, qtr4
, sum(qtr1, qtr2, qtr3, qtr4) as tot_donation 'Ann. Donation'
from 
(select 
a.employee_id
, employee_name
, salary
 from orion.employee_payroll a
 , orion.employee_addresses b
 where a.employee_id=b.employee_id 
 and employee_term_date is missing 
 and (employee_hire_date between "&startdt."d and "&enddt."d) 
 and employee_gender = "&gender.") as c

 left join
 orion.employee_donations as d
 on c.employee_id=d.employee_id
 ;
 quit;

/* Question 3 - Use a proc print to print the data portion of the data set by using the SYSLAST macro variable */
title 'Data Portion of the &SYSLAST Data Set';
proc print data=&SYSLAST.;
run;

/* 
Question 4 - copy the SQL section created above.  
Create a macro with arguments to run the entire sql procedure in one line 
When calling this macro, specify the fully spelled out Gender name 
*/


%macro donations(outlib, gender, startdt, enddt);

/* 
construct the data set name automatically in the form of GenderSTARTYEAR 
This will help with that
*/
data _null_;
concat_2 = compress(propcase("&gender.")||year("&startdt."d));
call symputx('dset', concat_2);
run;

proc sql;
create table &outlib..&dset. as 
select 
c.employee_id 'ID'
, employee_name 'Name'
, salary format=dollar8.
, qtr1
, qtr2
, qtr3
, qtr4
, sum(qtr1, qtr2, qtr3, qtr4) as tot_donation 'Ann. Donation'
from 

(select 
a.employee_id
, employee_name
, salary
 from orion.employee_payroll a
 , orion.employee_addresses b
 where a.employee_id=b.employee_id 
 and employee_term_date is missing 
 and (employee_hire_date between "&startdt."d and "&enddt."d) 
 /* parse out the employee gender from the user-function input */
 and employee_gender = substr(propcase("&gender."), 1, 1)) as c

 left join
 orion.employee_donations as d
 on c.employee_id=d.employee_id
 ;
 
 /*print out the results of the query*/
 /*construct the title */
 title "Donations of Male Employees Hired between &startdt. and &enddt.";
 footnote "&SYSLAST.";
 select
 *
 from
 &&outlib..&dset.
 ;
 /* Include housekeeping statements */
 title;
 footnote;
 quit;
 %mend;

/*Question 5 - call the macro wtih specified parameters */
%donations(sasdata, male, 01Jan1974, 30Jun1974);

/* Question 6
copy the macro definition code and paste it at the bottom of your SAS program 
use the proper options to store it in the permanent library specified in part 1
*/
options mstored sasmstore=sasdata;

%macro donations(outlib, gender, startdt, enddt) / STORE;

/* 
construct the data set name automatically in the form of GenderSTARTYEAR 
This will help with that
*/
data _null_;
concat_2 = compress(propcase("&gender.")||year("&startdt."d));
call symputx('dset', concat_2);
run;

proc sql;
create table &&outlib..&dset. as 
select 
c.employee_id 'ID'
, employee_name 'Name'
, salary format=dollar8.
, qtr1
, qtr2
, qtr3
, qtr4
, sum(qtr1, qtr2, qtr3, qtr4) as tot_donation 'Ann. Donation'
from 

(select 
a.employee_id
, employee_name
, salary
 from orion.employee_payroll a
 , orion.employee_addresses b
 where a.employee_id=b.employee_id 
 and employee_term_date is missing 
 and (employee_hire_date between "&startdt."d and "&enddt."d) 
 /* parse out the employee gender from the user-function input */
 and employee_gender = substr(propcase("&gender."), 1, 1)) as c

 left join
 orion.employee_donations as d
 on c.employee_id=d.employee_id
 ;
 
 /*print out the results of the query*/
 /*construct the title */
 title "Donations of Male Employees Hired between &startdt. and &enddt.";
 footnote "&SYSLAST.";
 select
 *
 from
 &&outlib..&dset.
 ;
 title;
 footnote;
 quit;
 %mend;


/* Question 7 - use the catalog procedure to list macros stored in your permanent library*/
proc catalog cat=sasdata.sasmacr;
    contents;
    title "Compiled Macros in My Permanent Library";
run;


/* close the pdf output device */
ods pdf close;